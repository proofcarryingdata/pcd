{
  "name": "@pcd/{{kebabCase name}}",
  {{! Delete this line for packages you intend to publish: }}
  "private": true,
  "version": "0.0.0",
  "license": "GPL-3.0-or-later",
  {{! CommonJS module is loaded from here }}
  "main": "./dist/cjs/src/index.js",
  {{! ESM module is loaded from here }}
  "module": "./dist/esm/src/index.js",
  "types": "./dist/types/src/index.d.ts",
  {{! Same exports as listed above: }}
  "exports": {
    ".": {
      {{! Types must be listed first }}
      "types": "./dist/types/src/index.d.ts",
      "import": "./dist/esm/src/index.js",
      "require": "./dist/cjs/src/index.js"
    }
  },
  {{! Modules containing ZK artifacts may need to add an extra folder here }}
  "files": [
    "dist",
    "./README.md",
    "./LICENSE"
  ],
  "scripts": {
    "lint": "eslint \"**/*.ts{,x}\"",
    {{! Build both CJS and ESM variants }}
    "build": "tsc -b tsconfig.cjs.json tsconfig.esm.json",
    "typecheck": "yarn tsc --noEmit",
    "prepublishOnly": "yarn clean && yarn build",
    "test": "ts-mocha --type-check --config ../../../.mocharc.js --exit 'test/**/*.spec.ts'",
    {{! Delete build artifacts, installed/linked modules,
        and TypeScript incremental build data.
        TypeScript uses the last-modified date on tsbuildinfo files, and
        compares it to the last-modified date on source files. If you somehow
        delete the build artifacts in `dist` but don't update the source files,
        `tsc` will think that there is nothing to do and won't rebuild them, so
        when cleaning out a package it's necessary to delete these files. }}
    "clean": "rm -rf dist node_modules *.tsbuildinfo"
    {{! Other hooks that could be useful here:
      "dev": ""  - during development mode, run a specialized watcher that
                   updates the contents of this package. See passport-ui
                   for an example.
      "pre-build": "" - before building, modify the package. See passport-ui
                        for an example. }}
  },
  "dependencies": {},
  {{! These devDependencies are needed by almost all packages: }}
  "devDependencies": {
    "@pcd/eslint-config-custom": "{{ eslintConfigVersion }}",
    "@pcd/tsconfig": "{{ tsConfigVersion }}",
    "@types/chai": "^4.3.5",
    "@types/mocha": "^10.0.1",
    "eslint": "^8.57.0",
    "mocha": "^10.2.0",
    "ts-mocha": "^10.0.0",
    {{! The TypeScript version is probably overridden by the `resolutions`
        setting in the root package.json, but should be kept in sync with it to
        avoid confusion. }}
    "typescript": "^5.3.3"
  },
  "publishConfig": {
    "access": "public"
  }
}
