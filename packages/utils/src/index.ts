// @ts-nocheck
import * as ed from "@noble/ed25519";
import * as util from "./util";

function chunkifyPoint(point: ed.ExtendedPoint) {
  const chunks = [];
  const pointArray = [point.x, point.y, point.z, point.t];
  console.log(point);
  console.log(pointArray);
  for (let i = 0; i < 4; i++) {
    chunks.push(util.chunkBigInt(pointArray[i], BigInt(2 ** 85)));
  }
  for (let i = 0; i < chunks.length; i++) {
    util.pad(chunks[i], 3);
  }
  return chunks;
}

function testHypothesis() {
  const pointA = [
    43933056957747458452560886832567536073542840507013052263144963060608791330050n,
    16962727616734173323702303146057009569815335830970791807500022961899349823996n,
    1n,
    47597536765056690778342994103149503974598380825968728087754575050160026478564n,
  ];

  const PointA = new ed.ExtendedPoint(
    pointA[0],
    pointA[1],
    pointA[2],
    pointA[3]
  );

  const affineRepresentation = PointA.toAffine();

  const hex = affineRepresentation.toHex();
  console.log("hex:       " + hex);
  console.log("A:         " + exampleInputs.A);

  const converted = util.buffer2bits(
    Buffer.from(affineRepresentation.toRawBytes())
  );
  console.log("Converted: " + converted);

  for (let i = 0; i < Math.max(converted.length, exampleInputs.A.length); i++) {
    if (converted[i].toString() !== exampleInputs.A[i].toString()) {
      console.log(i, converted[i], exampleInputs.A[i]);
      console.log("ERROR");
      process.exit(1);
    } else {
      console.log("cd");
    }
  }

  const decoded = ed.ExtendedPoint.fromAffine(ed.Point.fromHex(hex));

  for (let i = 0; i < decoded.length; i++) {
    if (decoded[i] !== pointA[i]) {
      console.log("ERROR");
      process.exit(1);
    }
  }

  const chunkified = chunkifyPoint(PointA);

  for (let i = 0; i < chunkified.length; i++) {
    for (let j = 0; j < 3; j++) {
      if (chunkified[i][j].toString() !== exampleInputs.PointA[i][j]) {
        console.log("ERROR");

        console.log("");
        console.log(chunkified);
        console.log("");
        console.log(exampleInputs.PointA);
        process.exit(1);
      }
    }
  }

  console.log("HYPOTHESIS VERIFIED");
}

/**
msg is the data for the signature

R8 is the first 256 bits of the signature (LSB to MSB)

S is the first 255 bits of the last 256 bits of the signature (LSB to MSB)

A is the public key in binary (LSB to MSB)

PointA is the point representing the public key on the elliptic curve (encoded in base 2^85 for brevity)

PointR is the point representing the R8 value on the elliptic curve (encoded in base 2^85)
 */
export async function getInputs() {
  // testHypothesis();
  // if (Math.random() > 0) {
  //   process.exit(0);
  // }

  // setup
  const message = Uint8Array.from([0xff, 0xfa]);
  const privateKey = ed.utils.randomPrivateKey();
  const publicKey: Uint8Array = await ed.getPublicKey(privateKey);
  const signature: Uint8Array = await ed.sign(message, privateKey);
  // end setup

  const msg = util.buffer2bits(Buffer.from(message));
  const A = util.buffer2bits(Buffer.from(publicKey));

  const r8Bytes = signature.subarray(0, 256 / 8);
  const R8 = util.buffer2bits(Buffer.from(r8Bytes));

  const publicKeyHex = ed.utils.bytesToHex(publicKey);
  const pointA = ed.ExtendedPoint.fromAffine(ed.Point.fromHex(publicKeyHex));
  const pointAbase85 = chunkifyPoint(pointA);

  const R8Hex = ed.utils.bytesToHex(r8Bytes);
  const pointR = ed.ExtendedPoint.fromAffine(ed.Point.fromHex(R8Hex));
  const pointRbase85 = chunkifyPoint(pointR);

  const sBytes = signature.subarray(signature.length - 32, signature.length);
  const SBuf = util.buffer2bits(Buffer.from(sBytes));
  SBuf.shift();
  const SLEB = SBuf;

  console.log(pointA, pointR);

  const inputs = {
    msg: msg,
    A: A,
    R8: R8,
    S: SLEB,
    PointA: pointAbase85,
    PointR: pointRbase85,
  };

  console.log(inputs);

  return inputs;

  // console.log(inputs);

  // return inputs;

  // return {
  //   msg: [
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //   ],
  //   A: [
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //   ],
  //   R8: [
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //   ],
  //   S: [
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "1",
  //     "1",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //     "1",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "1",
  //     "0",
  //     "0",
  //     "0",
  //   ],
  //   PointA: [
  //     [
  //       "4730506516830149311053058",
  //       "16492541847767404437354919",
  //       "29355681060784451154336116",
  //     ],
  //     [
  //       "37044855473276001117360636",
  //       "36044041573171652573795971",
  //       "11334344940228348385886412",
  //     ],
  //     ["1", "0", "0"],
  //     [
  //       "36006434350668361313085412",
  //       "3961809584842615293282987",
  //       "31804254138239842479622482",
  //     ],
  //   ],
  //   PointR: [
  //     [
  //       "2328148767130699190453327",
  //       "21019210829853924773317397",
  //       "17422058868782080515274437",
  //     ],
  //     [
  //       "7439055530601725237301602",
  //       "5010768007177350092543207",
  //       "13528818393860270915128989",
  //     ],
  //     ["1", "0", "0"],
  //     [
  //       "21834518600060388913341896",
  //       "35467612521506016148096723",
  //       "5257184083217746721055169",
  //     ],
  //   ],
  // };
}

// getInputs();

const exampleInputs = {
  msg: [
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
  ],
  A: [
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
  ],
  R8: [
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
  ],
  S: [
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "0",
    "0",
    "0",
  ],
  PointA: [
    [
      "4730506516830149311053058",
      "16492541847767404437354919",
      "29355681060784451154336116",
    ],
    [
      "37044855473276001117360636",
      "36044041573171652573795971",
      "11334344940228348385886412",
    ],
    ["1", "0", "0"],
    [
      "36006434350668361313085412",
      "3961809584842615293282987",
      "31804254138239842479622482",
    ],
  ],
  PointR: [
    [
      "2328148767130699190453327",
      "21019210829853924773317397",
      "17422058868782080515274437",
    ],
    [
      "7439055530601725237301602",
      "5010768007177350092543207",
      "13528818393860270915128989",
    ],
    ["1", "0", "0"],
    [
      "21834518600060388913341896",
      "35467612521506016148096723",
      "5257184083217746721055169",
    ],
  ],
};
